require("pathname")
require_relative("./flags")

MRUBY_DIR = Pathname.new(__dir__).join("mruby")
raise(<<-MESSAGE) unless Dir.exist?(MRUBY_DIR.join("src"))

  The mruby source code appears to be missing. Did you clone this gem with
  submodules? If that is not the case or you are unsure, you can run the
  following commands:

    $ git submodule init
    $ git submodule update

MESSAGE
ROOT = Pathname.new(__dir__).join("../..")
SERVICE_EXECUTABLE_DIR = ROOT.join("bin")
SERVICE_EXECUTABLE = SERVICE_EXECUTABLE_DIR.join("enterprise_script_service").to_s
SERVICE_SOURCES = Dir.glob("*.cpp").map(&:to_s)
Dir.chdir("#{ROOT}/tests") do
  SERVICE_TESTS = Dir.glob("*_test.cpp").map { |f| "#{Dir.pwd}/#{f.to_s}"}
  GOOGLE_TEST_DIR = "#{Dir.pwd}/googletest/googletest"
  SERVICE_TESTS << "#{GOOGLE_TEST_DIR}/src/gtest-all.cc"
  SERVICE_TESTS << "#{GOOGLE_TEST_DIR}/src/gtest_main.cc"
  SERVICE_TESTS_EXECUTABLE = SERVICE_EXECUTABLE_DIR.join("enterprise_script_service_tests").to_s
end

MRUBY_LIB_DIR = MRUBY_DIR.join("build/sandbox/lib")
MRUBY_LIB = MRUBY_LIB_DIR.join("libmruby.a")

LIBSECCOMP_DIR = Pathname.new(__dir__).join("libseccomp")
LIBSECCOMP_LIB_DIR = LIBSECCOMP_DIR.join("src/.libs")

CXX = ENV['CXX'] || 'g++'

if RUBY_PLATFORM =~ /linux/
  LIBSECCOMP_CFLAGS = [
    "-Ilibseccomp/include",
    "-L#{LIBSECCOMP_LIB_DIR}",
    "-lseccomp",
  ]
else
  LIBSECCOMP_CFLAGS = []
end

directory(SERVICE_EXECUTABLE_DIR)

file(SERVICE_EXECUTABLE => [
  SERVICE_EXECUTABLE_DIR,
  *SERVICE_SOURCES,
  __FILE__,
  MRUBY_LIB,
]) do
  sh(
    CXX,
    "--std=c++11",
    "-Wall",
    "-Wextra",
    "-Imsgpack/include",
    "-Imruby/include",
    "-L#{MRUBY_LIB_DIR}",
    *Flags.cflags,
    *Flags.defines.map { |define| "-D#{define}" },
    "-o", SERVICE_EXECUTABLE,
    *SERVICE_SOURCES,
    "-lmruby",
    *LIBSECCOMP_CFLAGS,
  )
end

SERVICE_SOURCES_NO_MAIN = SERVICE_SOURCES.select { |f| f != "ext.cpp"}

file(SERVICE_TESTS_EXECUTABLE => [
  SERVICE_EXECUTABLE_DIR,
  *SERVICE_SOURCES_NO_MAIN,
  *SERVICE_TESTS,
  __FILE__,
  MRUBY_LIB,
]) do
  sh(
    CXX,
    "--std=c++11",
    "-Wall",
    "-Wextra",
    "-Imsgpack/include",
    "-Imruby/include",
    "-I#{GOOGLE_TEST_DIR}/include",
    "-I#{GOOGLE_TEST_DIR}",
    "-I.",
    "-L#{MRUBY_LIB_DIR}",
    *Flags.cflags,
    *Flags.defines.map { |define| "-D#{define}" },
    "-o", SERVICE_TESTS_EXECUTABLE,
    *SERVICE_SOURCES_NO_MAIN,
    *SERVICE_TESTS,
    "-lmruby",
    "-lpthread",
    *LIBSECCOMP_CFLAGS,
  )
end

file(MRUBY_LIB => [:"mruby:compile", :"libseccomp:compile"])

task(clean: [:"mruby:mrproper", :"libseccomp:mrproper"]) do
  sh("rm", SERVICE_EXECUTABLE)
end

task(mrproper: [:clean, :"mruby:mrproper", :"libseccomp:mrproper"])

task(default: [SERVICE_EXECUTABLE, :test])

task(test: [SERVICE_TESTS_EXECUTABLE]) do
  sh(SERVICE_TESTS_EXECUTABLE)
end

namespace(:mruby) do
  def within_mruby
    Dir.chdir(MRUBY_DIR) do
      original_mruby_config = ENV['MRUBY_CONFIG']
      begin
        ENV['MRUBY_CONFIG'] = '../mruby_config.rb'
        yield
      ensure
        ENV['MRUBY_CONFIG'] = original_mruby_config
      end
    end
  end

  task(:compile) do
    within_mruby do
      sh("ruby", "./minirake")
    end
  end

  task(:clean) do
    within_mruby do
      sh("ruby", "./minirake", "clean")
    end
  end

  task(:mrproper) do
    within_mruby do
      sh("ruby", "./minirake", "deep_clean")
    end
  end
end

namespace(:libseccomp) do
  def within_libseccomp
    return unless RUBY_PLATFORM =~ /linux/

    Dir.chdir(LIBSECCOMP_DIR) do
      yield
    end
  end

  task(:compile) do
    within_libseccomp do
      sh("./autogen.sh") unless File.exist?(LIBSECCOMP_DIR.join("configure"))
      sh("./configure", "--enable-shared=no") unless File.exist?(LIBSECCOMP_DIR.join("Makefile"))
      sh("make")
    end
  end

  task(:clean) do
    within_libseccomp do
      sh("make", "clean")
    end
  end

  task(:mrproper) do
    within_libseccomp do
      sh("make", "distclean")
    end
  end
end
